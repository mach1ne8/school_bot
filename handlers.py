from aiogram import Bot, types, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import keyboards as kb
from database import db
from classes import classes, all_classes
from config import admins
from loader import loader
import config

import time

from datetime import datetime
import re

router = Router()

class User(StatesGroup):
    feedback = State()
    registration = State()
    
class Admin(StatesGroup):
    admin_broadcast = State()

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(User.registration)
    if not(db.is_user_exists(message.from_user.id)):
        print("–î–æ–±–∞–≤–ª–µ–Ω", message.from_user.id)
        db.add_user(message.from_user.id, message.from_user.username)
    else:
        db.update_user_data("autotimetable", 0, message.from_user.id)
    await message.answer("üëãüèº")
    time.sleep(0.3)
    await message.answer("–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —à–∫–æ–ª—ã ‚Ññ40 –≥. –ß–µ—Ä–µ–ø–æ–≤—Ü–∞\n\n –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –í—ã —É—á–∏—Ç–µ—Å—å", reply_markup=kb.choose_shift_kb())

@router.callback_query(F.data == "shift")
async def get_shift_choice(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –í—ã —É—á–∏—Ç–µ—Å—å", reply_markup=kb.choose_shift_kb())
    
@router.callback_query(F.data.startswith("shift"))
async def get_shifts(callback: CallbackQuery, state: FSMContext):
    await state.update_data({"shift": callback.data})
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å", reply_markup=kb.choose_class_kb(callback.data))

@router.callback_query(F.data.startswith("class"))
async def get_classes(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    shift = state_data.get("shift")
    await state.update_data({"shift": shift, "class": callback.data})
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞", reply_markup=kb.choose_literal_kb(shift=shift, class_=callback.data))

def check_class_exists(class_, literal):
    try:
        class_ = int(class_)
        check = literal in classes[class_]
        return check
    except Exception:
        return False

@router.callback_query(F.data.startswith("literal"))
async def get_literal(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    shift = state_data.get("shift").split("_")[1]
    class_ = state_data.get("class").split("_")[1]
    literal = callback.data.split("_")[1]
    await state.clear()
    if check_class_exists(class_, literal):
        db.update_user_data("shift", shift, callback.from_user.id)
        db.update_user_data("class", class_, callback.from_user.id)
        db.update_user_data("literal", literal, callback.from_user.id)
        await callback.message.edit_text("–ö–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω")
        time.sleep(0.25)
        await callback.message.answer(f"–¢–µ–ø–µ—Ä—å –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ <b>{class_}{literal}</b> –∫–ª–∞—Å—Å—É")
        time.sleep(0.75)
        await callback.message.answer("–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –æ–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ", reply_markup=kb.autotimetable_kb())
        time.sleep(2.5)
        await callback.message.answer("<i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞...</i>")
        try:
            lessons = get_lessons_by_class(f"{class_}{literal}")
            time.sleep(1)
            await callback.message.answer(lessons)
        except Exception:
            time.sleep(1)
            await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        time.sleep(1.5)
        await menu(callback.message, state)
    else:
        await callback.message.answer("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í—ã –≤–≤–µ–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await start(callback.message, state)

@router.message(User.registration)
async def unreg_action(message: Message):
    await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å. –ß—Ç–æ–±—ã –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
       
@router.callback_query(F.data == "switch_on")
async def need_notification(callback: CallbackQuery, state: FSMContext):
    try:
        db.update_user_data("autotimetable", 1, callback.from_user.id)
        await callback.message.edit_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    except Exception:
        await start(callback.message, state)

@router.message(Command("menu"))
async def menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("<b>–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ</b>", reply_markup=kb.menu_kb())
    
@router.message(Command("admin"))
async def admin(message: Message, state: FSMContext):
    if message.from_user.id in admins:
        await message.answer("<i><b>admin:</b></i> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞")
        await state.set_state(Admin.admin_broadcast)
    else:
        return
    
@router.message(F.text.startswith("/unban"))
async def unban(message: Message, bot: Bot):
    if not(message.from_user.id in admins):
        return
    try:
        username = message.text.split(" ")[1]
        db.unban_user(username)
        user = db.get_user_by_username(username)
        await bot.send_message(chat_id=user, text="<b>–í–∞–º –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤!</b>")
        await message.answer(f"<i><b>admin:</b></i> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except Exception as ex:
        await message.answer("<i><b>admin:</b></i> –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
@router.message(Command("load"))
async def load(message: Message):
    if message.from_user.id in admins:
        loader(config.file_temp, config.WEBSITE)
        await message.answer("<i><b>admin:</b></i> –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω")
    else:
        return

@router.message(Admin.admin_broadcast)
async def broadcast(message: Message, state: FSMContext, bot: Bot):
    text_ = message.text
    all_users = db.get_all_users()
    for user in all_users:
        try:
            await bot.send_message( chat_id=user, text=text_)
        except Exception:
            print(f"–ù–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ: {user}")
    await message.answer("<i><b>admin:</b></i> –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    await state.clear()
    
@router.callback_query(F.data == "menu")
async def menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.edit_reply_markup()
    except Exception:
        pass
    await callback.message.answer("<b>–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ</b>", reply_markup=kb.menu_kb())

@router.message(Command("button"))
async def button(message: Message):
    await message.answer("<b>–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ</b>", reply_markup=types.ReplyKeyboardRemove())

@router.message(Command("commands"))
@router.message(F.text == "üí† –ö–æ–º–∞–Ω–¥—ã")
async def commands(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n<b>/start</b> ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n\n<b>/menu</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n<b>/button</b> ‚Äî —Å–∫—Ä—ã—Ç—å –º–µ–Ω—é\n\n<b>/class</b> ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞\n<b>/class</b> <i>–î–î</i>.<i>–ú–ú</i> ‚Äî —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å\n<b>/class</b> <i>–∫–ª–∞—Å—Å</i> ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞\n<b>/class</b> <i>–∫–ª–∞—Å—Å</i> <i>–î–î</i>.<i>–ú–ú</i> ‚Äî —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å\n\n<u>–ù–∞–ø—Ä–∏–º–µ—Ä:</u> /class 7–ê, –∏–ª–∏ /class 21.12, –∏–ª–∏ /class 10–ë 01.04 –∏ —Ç. –ø.\n\n<b>/autotimetable</b> ‚Äî –≤–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n<b>/commands</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n<b>/fb</b> ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")

def validate_and_format_date(input_date):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –¥–∞—Ç—ã
    if re.match(r'^\d{1,2}\.\d{1,2}$', input_date):
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
        day, month = input_date.split('.')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        formatted_date = f'{int(day):02d}.{int(month):02d}'
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç datetime –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–¥ –Ω–∞ –Ω–µ–Ω—É–ª–µ–≤–æ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –≤–∞–ª–∏–¥–Ω—ã –≤ –ª—é–±–æ–º –≥–æ–¥—É
            datetime.strptime(formatted_date, '%d.%m')
            return formatted_date
        except ValueError:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            return ''
    else:
        # –í —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç—É —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ''
    
def get_lessons_by_class(class_name, date_str = ""):
    if not(date_str):
        (date_str,lessons) = db.get_last_lessons_by_class(class_name)
        date = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
        date = date.strftime("%d.%m")
    else:
        date = date_str
        lessons = db.get_lessons_by_date(class_name, date)
        if not(lessons):
            current_datetime = datetime.now()
            current_date = current_datetime.date()
            current_year = current_datetime.year
            date_obj = datetime.strptime(date + '.' + str(current_year), '%d.%m.%Y').date()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π
            if date_obj <= current_date:
                lessons = "–£—Ä–æ–∫–æ–≤ –Ω–µ—Ç"
            else:
                lessons = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
            
    return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - <b>{class_name}</b>\n<b>{date}</b>\n\n{lessons}"

def get_shift_by_class(user_class):
    if "6" in user_class or "7" in user_class:
        return "2"
    else:
        return "1"

@router.message(F.text == "/class")
@router.message(F.text == "üìå –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def get_lesson(message: Message, state: FSMContext):
    await state.clear()
    user_class = db.get_user_class(message.from_user.id)
    if user_class:
        # try:
            lessons = get_lessons_by_class(user_class)
            await message.answer(lessons)
        # except Exception as ex:
        #     print(ex)
        #     await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    else:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å. –ß—Ç–æ–±—ã –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

@router.message(F.text.startswith("/class"))
async def get_lessons(message: Message, state: FSMContext):
    await state.clear()
    text_data = message.text.split(" ")
    if len(text_data) == 2:
        class_or_date = text_data[1]
        if "." in class_or_date:
            formated_date = validate_and_format_date(class_or_date)
            user_class = db.get_user_class(message.from_user.id)
            if user_class:
                lessons = get_lessons_by_class(user_class, formated_date)
                await message.answer(lessons)
            else:
                await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å. –ß—Ç–æ–±—ã –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        else:
            user_class = class_or_date.upper()
            if user_class in all_classes:
                lessons = get_lessons_by_class(user_class)
                await message.answer(lessons)
            else:
                await message.answer("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í—ã –≤–≤–µ–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    elif len(text_data) == 3:
        class_ = text_data[1].upper()
        date = text_data[2]
        
        if not(class_ in all_classes):
            await message.answer("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í—ã –≤–≤–µ–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
        
        formated_date = validate_and_format_date(date)
        if not(formated_date):
            await message.answer("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã <i>(–ø–æ–¥—Ä–æ–±–Ω–µ–µ - /commands)</i>. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í—ã –≤–≤–µ–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
        
        lessons = get_lessons_by_class(class_, formated_date)
        await message.answer(lessons)

@router.message(Command("autotimetable")) 
async def in_developing(message: Message, state: FSMContext):
    await state.clear()
    new_pos = db.switch_autotimetable(message.from_user.id)
    if new_pos:
        await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
        time.sleep(0.5)
        await message.answer("<i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞...</i>")
        try:
            lessons = get_lessons_by_class(db.get_user_class(message.from_user.id))
            time.sleep(2.5)
            await message.answer(lessons)
        except Exception:
            time.sleep(2.5)
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –±–∞–∑—É –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            pass
    else:
        await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")

@router.message(Command("fb"))
@router.message(F.text == "‚úâÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def leave_feedback(message: Message, state: FSMContext):
    user_banned = db.check_ban(message.from_user.id)
    if user_banned:
        await message.answer("–í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–∑—ã–≤–æ–≤. –ï—Å–ª–∏ —Ç–∞–∫–æ–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –í–∞–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–≥—Ä–∞–Ω–∏—á–∞—Ç –¥–æ—Å—Ç—É–ø. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ @ahahahhaahhaahha")
        return
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, –∫–∞–∫–∏–µ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –∏ (–∏–ª–∏) —á—Ç–æ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤ –±—É–¥—É—â–µ–º", reply_markup=kb.back_to_menu_kb())
    await state.set_state(User.feedback)

@router.message(User.feedback, F.text)
async def send_feedback(message: Message, state: FSMContext, bot: Bot):
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç—ë–º")
    try:
        await bot.send_message(chat_id=admins[0], text=f"üìå–û—Ç–∑—ã–≤ @{message.from_user.username}\n\n<i>{message.text}</i>", reply_markup=kb.ban_kb(message.from_user.id, message.from_user.username))
    except Exception:
        print(f"–ê–¥–º–∏–Ω {admins} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    await state.clear()
    await menu(message, state)
    
@router.message(User.feedback)
async def wrong_feedback(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
@router.callback_query(F.data.startswith("ban"))
async def ban_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    username = callback.data.split("_")[3]
    if user_id in admins:
        await callback.answer(":)")
        return
    db.ban_user(user_id, username)
    await callback.message.edit_text(f"<i><b>admin:</b></i> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")
    
@router.message()
async def catch_wrongs(message: Message):
    await message.answer("–ë–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu")